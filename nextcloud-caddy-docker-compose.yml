# Nextcloud with Let's Encrypt Using Docker Compose and Caddy
#
# Basiert auf der Traefik-Konfiguration und erweitert um Caddy-Support
# Siehe: https://help.nextcloud.com/t/nextcloud-docker compose-setup-with-caddy-2024/204846
#
# Änderungen in der `.env` Datei vornehmen um die Anforderungen zu erfüllen.
# Die `.env` Datei sollte im gleichen Verzeichnis wie diese docker compose.yml sein.
#
# Netzwerke vor dem Deployment erstellen:
# `docker network create caddy-network`
# `docker network create nextcloud-network`
#
# Nextcloud mit Docker Compose deployen:
# `docker compose -f nextcloud-caddy-docker compose.yml -p nextcloud-caddy up -d`
#
# Features:
# - Caddy als Reverse Proxy mit automatischen Let's Encrypt Zertifikaten
# - PHP-FPM basierte Nextcloud Installation
# - Redis Cache
# - Nextcloud Notify Push Service
# - PostgreSQL oder externe Datenbank (konfigurierbar)
# - Automatische Backups
# - Cron Jobs für Nextcloud Maintenance

networks:
  nextcloud-network:
    external: true
  caddy-network:
    external: true

volumes:
  nextcloud-data:
  redis-data:
  nextcloud-postgres:
  nextcloud-postgres-backup:
  nextcloud-data-backups:
  nextcloud-database-backups:
  caddy-data:
  caddy-config:

secrets:
  redis_password:
    file: ./secrets/redis_password.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  nextcloud_admin_password:
    file: ./secrets/nextcloud_admin_password.txt

services:
  # PostgreSQL Datenbank (nur wenn USE_DOCKER_DB=true in .env)
  postgres:
    image: ${NEXTCLOUD_POSTGRES_IMAGE_TAG}
    profiles:
      - docker-db
    volumes:
      - nextcloud-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${NEXTCLOUD_DB_NAME}
      POSTGRES_USER: ${NEXTCLOUD_DB_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    networks:
      - nextcloud-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${NEXTCLOUD_DB_NAME}", "-U", "${NEXTCLOUD_DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: ${NEXTCLOUD_REDIS_IMAGE_TAG}
    command: ["redis-server", "--requirepass", "$(cat /run/secrets/redis_password)", "--appendonly", "yes"]
    user: "${REDIS_USER_ID}:${REDIS_GROUP_ID}"
    volumes:
      - redis-data:/data
    secrets:
      - redis_password
    networks:
      - nextcloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Nextcloud FPM Container
  app:
    image: ${NEXTCLOUD_FPM_IMAGE_TAG}
    user: "${NEXTCLOUD_USER_ID}:${NEXTCLOUD_GROUP_ID}"
    volumes:
      - nextcloud-data:/var/www/html
      - ${NEXTCLOUD_DATA_DIR}:/var/www/html/data
      - ./nextcloud.env:/var/www/html/.env
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${NEXTCLOUD_DB_NAME}
      POSTGRES_USER: ${NEXTCLOUD_DB_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      REDIS_HOST: redis
      REDIS_HOST_PORT: 6379
      REDIS_HOST_PASSWORD_FILE: /run/secrets/redis_password
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USERNAME}
      NEXTCLOUD_ADMIN_PASSWORD_FILE: /run/secrets/nextcloud_admin_password
      NEXTCLOUD_TRUSTED_DOMAINS: ${NEXTCLOUD_HOSTNAME}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES}
      OVERWRITECLIURL: ${NEXTCLOUD_URL}
      OVERWRITEPROTOCOL: https
      OVERWRITEHOST: ${NEXTCLOUD_HOSTNAME}
      OVERWRITEWEBROOT: ${OVERWRITEWEBROOT:-}
    secrets:
      - postgres_password
      - redis_password
      - nextcloud_admin_password
    networks:
      - nextcloud-network
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy

  # Caddy Webserver für Nextcloud FPM
  web:
    image: ${CADDY_IMAGE_TAG}
    volumes:
      - nextcloud-data:/var/www/html:ro
      - ${NEXTCLOUD_DATA_DIR}:/var/www/html/data:ro
      - ./Caddyfile.nextcloud:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    environment:
      DOMAIN: ${NEXTCLOUD_HOSTNAME}
    networks:
      - nextcloud-network
      - caddy-network
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy

  # Caddy Reverse Proxy
  proxy:
    image: ${CADDY_IMAGE_TAG}
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3 support
    volumes:
      - ./Caddyfile.proxy:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    environment:
      NEXTCLOUD_DOMAIN: ${NEXTCLOUD_HOSTNAME}
      EMAIL: ${ACME_EMAIL}
    networks:
      - caddy-network
    restart: unless-stopped
    depends_on:
      - web

  # HINWEIS: Cron-Jobs werden über Host-System ausgeführt
  # Script: nextcloud-cron-host.sh
  # Einrichtung: ./nextcloud-manager.sh setup

  # Nextcloud Notify Push Service
  notify_push:
    image: ${NOTIFY_PUSH_IMAGE_TAG}
    environment:
      NEXTCLOUD_URL: http://web
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
      DATABASE_URL: postgresql://${NEXTCLOUD_DB_USER}:$(cat /run/secrets/postgres_password)@${DB_HOST}:5432/${NEXTCLOUD_DB_NAME}
    secrets:
      - redis_password
      - postgres_password
    networks:
      - nextcloud-network
      - caddy-network
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Imaginary für Vorschaubilder
  imaginary:
    image: ${IMAGINARY_IMAGE_TAG}
    environment:
      PORT: 9000
    networks:
      - nextcloud-network
    restart: unless-stopped
    command: -enable-url-source -return-size

  # Backup Service
  backups:
    image: ${NEXTCLOUD_POSTGRES_IMAGE_TAG}
    profiles:
      - docker-db
    command: >-
      sh -c 'sleep $BACKUP_INIT_SLEEP &&
      while true; do
        pg_dump -h ${DB_HOST} -p 5432 -d $NEXTCLOUD_DB_NAME -U $NEXTCLOUD_DB_USER | gzip > $POSTGRES_BACKUPS_PATH/$POSTGRES_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").gz &&
        tar -zcpf $DATA_BACKUPS_PATH/$DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $DATA_PATH &&
        find $POSTGRES_BACKUPS_PATH -type f -mtime +$POSTGRES_BACKUP_PRUNE_DAYS | xargs rm -f &&
        find $DATA_BACKUPS_PATH -type f -mtime +$DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
        sleep $BACKUP_INTERVAL; done'
    volumes:
      - nextcloud-postgres-backup:/var/lib/postgresql/data
      - ${NEXTCLOUD_DATA_DIR}:${DATA_PATH}
      - nextcloud-data-backups:${DATA_BACKUPS_PATH}
      - nextcloud-database-backups:${POSTGRES_BACKUPS_PATH}
    environment:
      NEXTCLOUD_DB_NAME: ${NEXTCLOUD_DB_NAME}
      NEXTCLOUD_DB_USER: ${NEXTCLOUD_DB_USER}
      PGPASSWORD_FILE: /run/secrets/postgres_password
      BACKUP_INIT_SLEEP: ${BACKUP_INIT_SLEEP}
      BACKUP_INTERVAL: ${BACKUP_INTERVAL}
      POSTGRES_BACKUP_PRUNE_DAYS: ${POSTGRES_BACKUP_PRUNE_DAYS}
      DATA_BACKUP_PRUNE_DAYS: ${DATA_BACKUP_PRUNE_DAYS}
      POSTGRES_BACKUPS_PATH: ${POSTGRES_BACKUPS_PATH}
      DATA_BACKUPS_PATH: ${DATA_BACKUPS_PATH}
      DATA_PATH: ${DATA_PATH}
      POSTGRES_BACKUP_NAME: ${POSTGRES_BACKUP_NAME}
      DATA_BACKUP_NAME: ${DATA_BACKUP_NAME}
    secrets:
      - postgres_password
    networks:
      - nextcloud-network
    restart: unless-stopped
